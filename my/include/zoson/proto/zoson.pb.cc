// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zoson.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zoson.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TestProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DContextParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DContextParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* DModel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DModel_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectorParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectorParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DetectorParameter_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MeanValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeanValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectInput_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DetectInput_Format_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DetectOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommuParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommuParameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CommuParameter_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClassMaps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassMaps_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClassMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClassMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Cookie_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Cookie_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bytetranfer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bytetranfer_reflection_ = NULL;
const ::google::protobuf::Descriptor* VLayerInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VLayerInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* VLayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VLayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* VFeatureMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VFeatureMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* VImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* VReqDeconv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VReqDeconv_reflection_ = NULL;
const ::google::protobuf::Descriptor* VSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* VResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VResponse_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* VRecState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VRecState_reflection_ = NULL;
const ::google::protobuf::Descriptor* VAll_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VAll_reflection_ = NULL;
const ::google::protobuf::Descriptor* VReqFeature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VReqFeature_reflection_ = NULL;
const ::google::protobuf::Descriptor* VReqWeight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VReqWeight_reflection_ = NULL;
const ::google::protobuf::Descriptor* VState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_zoson_2eproto() {
  protobuf_AddDesc_zoson_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zoson.proto");
  GOOGLE_CHECK(file != NULL);
  TestProto_descriptor_ = file->message_type(0);
  static const int TestProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, clazz_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, dim_),
  };
  TestProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TestProto_descriptor_,
      TestProto::default_instance_,
      TestProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TestProto));
  DContextParameter_descriptor_ = file->message_type(1);
  static const int DContextParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DContextParameter, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DContextParameter, commu_),
  };
  DContextParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DContextParameter_descriptor_,
      DContextParameter::default_instance_,
      DContextParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DContextParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DContextParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DContextParameter));
  DModel_descriptor_ = file->message_type(2);
  static const int DModel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModel, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModel, model_),
  };
  DModel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DModel_descriptor_,
      DModel::default_instance_,
      DModel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DModel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DModel));
  DetectorParameter_descriptor_ = file->message_type(3);
  static const int DetectorParameter_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, use_gpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, istrain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, solver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, mean_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, in_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, out_name_),
  };
  DetectorParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectorParameter_descriptor_,
      DetectorParameter::default_instance_,
      DetectorParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectorParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectorParameter));
  DetectorParameter_Type_descriptor_ = DetectorParameter_descriptor_->enum_type(0);
  MeanValue_descriptor_ = file->message_type(4);
  static const int MeanValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanValue, scale_),
  };
  MeanValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeanValue_descriptor_,
      MeanValue::default_instance_,
      MeanValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeanValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeanValue));
  DetectInput_descriptor_ = file->message_type(5);
  static const int DetectInput_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectInput, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectInput, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectInput, data_),
  };
  DetectInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectInput_descriptor_,
      DetectInput::default_instance_,
      DetectInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectInput));
  DetectInput_Format_descriptor_ = DetectInput_descriptor_->enum_type(0);
  DetectOutput_descriptor_ = file->message_type(6);
  static const int DetectOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectOutput, results_),
  };
  DetectOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectOutput_descriptor_,
      DetectOutput::default_instance_,
      DetectOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectOutput));
  Result_descriptor_ = file->message_type(7);
  static const int Result_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, xmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, ymin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, xmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, ymax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, clazz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, score_),
  };
  Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Result));
  CommuParameter_descriptor_ = file->message_type(8);
  static const int CommuParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommuParameter, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommuParameter, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommuParameter, client_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommuParameter, type_),
  };
  CommuParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommuParameter_descriptor_,
      CommuParameter::default_instance_,
      CommuParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommuParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommuParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommuParameter));
  CommuParameter_Type_descriptor_ = CommuParameter_descriptor_->enum_type(0);
  ClassMaps_descriptor_ = file->message_type(9);
  static const int ClassMaps_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassMaps, item_),
  };
  ClassMaps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClassMaps_descriptor_,
      ClassMaps::default_instance_,
      ClassMaps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassMaps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassMaps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClassMaps));
  ClassMap_descriptor_ = file->message_type(10);
  static const int ClassMap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassMap, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassMap, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassMap, display_name_),
  };
  ClassMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClassMap_descriptor_,
      ClassMap::default_instance_,
      ClassMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClassMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClassMap));
  Cookie_descriptor_ = file->message_type(11);
  static const int Cookie_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cookie, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cookie, name_),
  };
  Cookie_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Cookie_descriptor_,
      Cookie::default_instance_,
      Cookie_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cookie, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Cookie, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Cookie));
  Bytetranfer_descriptor_ = file->message_type(12);
  static const int Bytetranfer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bytetranfer, count_),
  };
  Bytetranfer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bytetranfer_descriptor_,
      Bytetranfer::default_instance_,
      Bytetranfer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bytetranfer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bytetranfer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bytetranfer));
  VLayerInfos_descriptor_ = file->message_type(13);
  static const int VLayerInfos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VLayerInfos, infos_),
  };
  VLayerInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VLayerInfos_descriptor_,
      VLayerInfos::default_instance_,
      VLayerInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VLayerInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VLayerInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VLayerInfos));
  VLayerInfo_descriptor_ = file->message_type(14);
  static const int VLayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VLayerInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VLayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VLayerInfo, type_),
  };
  VLayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VLayerInfo_descriptor_,
      VLayerInfo::default_instance_,
      VLayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VLayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VLayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VLayerInfo));
  VFeatureMap_descriptor_ = file->message_type(15);
  static const int VFeatureMap_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VFeatureMap, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VFeatureMap, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VFeatureMap, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VFeatureMap, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VFeatureMap, data_),
  };
  VFeatureMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VFeatureMap_descriptor_,
      VFeatureMap::default_instance_,
      VFeatureMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VFeatureMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VFeatureMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VFeatureMap));
  VImage_descriptor_ = file->message_type(16);
  static const int VImage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VImage, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VImage, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VImage, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VImage, data_),
  };
  VImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VImage_descriptor_,
      VImage::default_instance_,
      VImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VImage));
  VReqDeconv_descriptor_ = file->message_type(17);
  static const int VReqDeconv_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqDeconv, i_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqDeconv, i_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqDeconv, do_deconv_),
  };
  VReqDeconv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VReqDeconv_descriptor_,
      VReqDeconv::default_instance_,
      VReqDeconv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqDeconv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqDeconv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VReqDeconv));
  VSetting_descriptor_ = file->message_type(18);
  static const int VSetting_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSetting, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSetting, solver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSetting, test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSetting, interval_),
  };
  VSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VSetting_descriptor_,
      VSetting::default_instance_,
      VSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VSetting));
  VResponse_descriptor_ = file->message_type(19);
  static const int VResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VResponse, data_),
  };
  VResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VResponse_descriptor_,
      VResponse::default_instance_,
      VResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VResponse));
  VResponse_Type_descriptor_ = VResponse_descriptor_->enum_type(0);
  VRecState_descriptor_ = file->message_type(20);
  static const int VRecState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VRecState, state_),
  };
  VRecState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VRecState_descriptor_,
      VRecState::default_instance_,
      VRecState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VRecState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VRecState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VRecState));
  VAll_descriptor_ = file->message_type(21);
  static const int VAll_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAll, response_),
  };
  VAll_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VAll_descriptor_,
      VAll::default_instance_,
      VAll_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAll, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VAll, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VAll));
  VReqFeature_descriptor_ = file->message_type(22);
  static const int VReqFeature_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqFeature, i_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqFeature, i_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqFeature, diff_),
  };
  VReqFeature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VReqFeature_descriptor_,
      VReqFeature::default_instance_,
      VReqFeature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqFeature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqFeature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VReqFeature));
  VReqWeight_descriptor_ = file->message_type(23);
  static const int VReqWeight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqWeight, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqWeight, diff_),
  };
  VReqWeight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VReqWeight_descriptor_,
      VReqWeight::default_instance_,
      VReqWeight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqWeight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VReqWeight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VReqWeight));
  VState_descriptor_ = file->message_type(24);
  static const int VState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VState, auto__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VState, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VState, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VState, deconv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VState, weight_),
  };
  VState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VState_descriptor_,
      VState::default_instance_,
      VState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zoson_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestProto_descriptor_, &TestProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DContextParameter_descriptor_, &DContextParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DModel_descriptor_, &DModel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectorParameter_descriptor_, &DetectorParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeanValue_descriptor_, &MeanValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectInput_descriptor_, &DetectInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectOutput_descriptor_, &DetectOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommuParameter_descriptor_, &CommuParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClassMaps_descriptor_, &ClassMaps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClassMap_descriptor_, &ClassMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Cookie_descriptor_, &Cookie::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bytetranfer_descriptor_, &Bytetranfer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VLayerInfos_descriptor_, &VLayerInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VLayerInfo_descriptor_, &VLayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VFeatureMap_descriptor_, &VFeatureMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VImage_descriptor_, &VImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VReqDeconv_descriptor_, &VReqDeconv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VSetting_descriptor_, &VSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VResponse_descriptor_, &VResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VRecState_descriptor_, &VRecState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VAll_descriptor_, &VAll::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VReqFeature_descriptor_, &VReqFeature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VReqWeight_descriptor_, &VReqWeight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VState_descriptor_, &VState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zoson_2eproto() {
  delete TestProto::default_instance_;
  delete TestProto_reflection_;
  delete DContextParameter::default_instance_;
  delete DContextParameter_reflection_;
  delete DModel::default_instance_;
  delete DModel_reflection_;
  delete DetectorParameter::default_instance_;
  delete DetectorParameter_reflection_;
  delete DetectorParameter::_default_in_name_;
  delete DetectorParameter::_default_out_name_;
  delete MeanValue::default_instance_;
  delete MeanValue_reflection_;
  delete DetectInput::default_instance_;
  delete DetectInput_reflection_;
  delete DetectOutput::default_instance_;
  delete DetectOutput_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
  delete CommuParameter::default_instance_;
  delete CommuParameter_reflection_;
  delete CommuParameter::_default_address_;
  delete CommuParameter::_default_client_name_;
  delete ClassMaps::default_instance_;
  delete ClassMaps_reflection_;
  delete ClassMap::default_instance_;
  delete ClassMap_reflection_;
  delete Cookie::default_instance_;
  delete Cookie_reflection_;
  delete Bytetranfer::default_instance_;
  delete Bytetranfer_reflection_;
  delete VLayerInfos::default_instance_;
  delete VLayerInfos_reflection_;
  delete VLayerInfo::default_instance_;
  delete VLayerInfo_reflection_;
  delete VFeatureMap::default_instance_;
  delete VFeatureMap_reflection_;
  delete VImage::default_instance_;
  delete VImage_reflection_;
  delete VReqDeconv::default_instance_;
  delete VReqDeconv_reflection_;
  delete VSetting::default_instance_;
  delete VSetting_reflection_;
  delete VResponse::default_instance_;
  delete VResponse_reflection_;
  delete VRecState::default_instance_;
  delete VRecState_reflection_;
  delete VAll::default_instance_;
  delete VAll_reflection_;
  delete VReqFeature::default_instance_;
  delete VReqFeature_reflection_;
  delete VReqWeight::default_instance_;
  delete VReqWeight_reflection_;
  delete VState::default_instance_;
  delete VState_reflection_;
}

void protobuf_AddDesc_zoson_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013zoson.proto\"+\n\tTestProto\022\021\n\tclazz_num\030"
    "\001 \002(\005\022\013\n\003dim\030\002 \003(\005\"K\n\021DContextParameter\022"
    "\026\n\005model\030\001 \003(\0132\007.DModel\022\036\n\005commu\030\003 \001(\0132\017"
    ".CommuParameter\"9\n\006DModel\022\014\n\004path\030\001 \001(\t\022"
    "!\n\005model\030\002 \001(\0132\022.DetectorParameter\"\304\002\n\021D"
    "etectorParameter\022\014\n\004name\030\001 \002(\t\022\r\n\005model\030"
    "\002 \002(\t\022\016\n\006weight\030\003 \002(\t\022\r\n\005label\030\004 \001(\t\022\017\n\007"
    "use_gpu\030\005 \003(\005\022\026\n\007istrain\030\010 \001(\010:\005false\022\016\n"
    "\006solver\030\t \001(\t\022\021\n\tmean_file\030\n \001(\t\022\030\n\004mean"
    "\030\013 \001(\0132\n.MeanValue\022/\n\004type\030\014 \001(\0162\027.Detec"
    "torParameter.Type:\010DETECTOR\022\025\n\007in_name\030\r"
    " \001(\t:\004data\022\037\n\010out_name\030\016 \001(\t:\rdetection_"
    "out\"$\n\004Type\022\014\n\010DETECTOR\020\001\022\016\n\nCLASSIFIER\020"
    "\002\",\n\tMeanValue\022\r\n\005value\030\001 \003(\002\022\020\n\005scale\030\002"
    " \001(\002:\0011\"y\n\013DetectInput\022\r\n\005width\030\002 \002(\005\022\016\n"
    "\006height\030\003 \002(\005\022\014\n\004data\030\004 \002(\014\"=\n\006Format\022\007\n"
    "\003JPG\020\000\022\007\n\003PNG\020\001\022\007\n\003RGB\020\002\022\013\n\007YOV_420\020\003\022\013\n"
    "\007YOV_422\020\004\"(\n\014DetectOutput\022\030\n\007results\030\001 "
    "\003(\0132\007.Result\"^\n\006Result\022\014\n\004xmin\030\001 \002(\002\022\014\n\004"
    "ymin\030\002 \002(\002\022\014\n\004xmax\030\003 \002(\002\022\014\n\004ymax\030\004 \002(\002\022\r"
    "\n\005clazz\030\005 \002(\005\022\r\n\005score\030\006 \002(\002\"\261\001\n\016CommuPa"
    "rameter\022\032\n\007address\030\001 \001(\t:\tlocalhost\022\023\n\004p"
    "ort\030\002 \001(\005:\00510086\022\030\n\013client_name\030\003 \001(\t:\003w"
    "eb\022\'\n\004type\030\004 \001(\0162\024.CommuParameter.Type:\003"
    "LOC\"+\n\004Type\022\007\n\003LOC\020\000\022\007\n\003IPC\020\001\022\007\n\003TCP\020\003\022\010"
    "\n\004RTMP\020\004\"$\n\tClassMaps\022\027\n\004item\030\001 \003(\0132\t.Cl"
    "assMap\"=\n\010ClassMap\022\014\n\004name\030\001 \002(\t\022\r\n\005labe"
    "l\030\002 \002(\005\022\024\n\014display_name\030\003 \002(\t\"\"\n\006Cookie\022"
    "\n\n\002ID\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\"\034\n\013Bytetranfer"
    "\022\r\n\005count\030\002 \002(\005\")\n\013VLayerInfos\022\032\n\005infos\030"
    "\001 \003(\0132\013.VLayerInfo\"7\n\nVLayerInfo\022\r\n\005inde"
    "x\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\014\n\004type\030\003 \002(\t\"X\n\013V"
    "FeatureMap\022\r\n\005width\030\001 \002(\005\022\016\n\006height\030\002 \002("
    "\005\022\013\n\003num\030\003 \002(\005\022\017\n\007channel\030\004 \002(\005\022\014\n\004data\030"
    "\005 \002(\014\"F\n\006VImage\022\r\n\005width\030\001 \002(\005\022\016\n\006height"
    "\030\002 \002(\005\022\017\n\007channel\030\003 \002(\005\022\014\n\004data\030\004 \002(\014\"F\n"
    "\nVReqDeconv\022\017\n\007i_layer\030\001 \002(\005\022\r\n\005i_map\030\002 "
    "\002(\005\022\030\n\tdo_deconv\030\003 \001(\010:\005false\"M\n\010VSettin"
    "g\022\r\n\005model\030\001 \002(\t\022\016\n\006solver\030\002 \002(\t\022\014\n\004test"
    "\030\003 \002(\t\022\024\n\010interval\030\004 \001(\005:\002-1\"\255\001\n\tVRespon"
    "se\022\035\n\004type\030\001 \002(\0162\017.VResponse.Type\022\014\n\004dat"
    "a\030\002 \001(\014\"s\n\004Type\022\n\n\006WEIGHT\020\001\022\016\n\nFEATUREMA"
    "P\020\002\022\016\n\nLAYERINFOS\020\003\022\t\n\005INPUT\020\004\022\n\n\006DECONV"
    "\020\005\022\007\n\003ALL\020\006\022\t\n\005STATE\020\007\022\013\n\007SETTING\020\010\022\007\n\003R"
    "EC\020\t\"\032\n\tVRecState\022\r\n\005state\030\001 \002(\005\"$\n\004VAll"
    "\022\034\n\010response\030\001 \003(\0132\n.VResponse\"D\n\013VReqFe"
    "ature\022\017\n\007i_layer\030\001 \002(\005\022\017\n\007i_image\030\002 \002(\005\022"
    "\023\n\004diff\030\003 \001(\010:\005false\"0\n\nVReqWeight\022\r\n\005in"
    "dex\030\001 \002(\005\022\023\n\004diff\030\002 \001(\010:\005false\"\204\001\n\006VStat"
    "e\022\022\n\004auto\030\001 \001(\010:\004true\022\021\n\005input\030\002 \001(\005:\002-1"
    "\022\031\n\003map\030\003 \001(\0132\014.VReqFeature\022\033\n\006deconv\030\004 "
    "\001(\0132\013.VReqDeconv\022\033\n\006weight\030\005 \001(\0132\013.VReqW"
    "eightB\'\n\031com.zoson.detection.protoB\nZoso"
    "nProto", 2126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zoson.proto", &protobuf_RegisterTypes);
  TestProto::default_instance_ = new TestProto();
  DContextParameter::default_instance_ = new DContextParameter();
  DModel::default_instance_ = new DModel();
  DetectorParameter::_default_in_name_ =
      new ::std::string("data", 4);
  DetectorParameter::_default_out_name_ =
      new ::std::string("detection_out", 13);
  DetectorParameter::default_instance_ = new DetectorParameter();
  MeanValue::default_instance_ = new MeanValue();
  DetectInput::default_instance_ = new DetectInput();
  DetectOutput::default_instance_ = new DetectOutput();
  Result::default_instance_ = new Result();
  CommuParameter::_default_address_ =
      new ::std::string("localhost", 9);
  CommuParameter::_default_client_name_ =
      new ::std::string("web", 3);
  CommuParameter::default_instance_ = new CommuParameter();
  ClassMaps::default_instance_ = new ClassMaps();
  ClassMap::default_instance_ = new ClassMap();
  Cookie::default_instance_ = new Cookie();
  Bytetranfer::default_instance_ = new Bytetranfer();
  VLayerInfos::default_instance_ = new VLayerInfos();
  VLayerInfo::default_instance_ = new VLayerInfo();
  VFeatureMap::default_instance_ = new VFeatureMap();
  VImage::default_instance_ = new VImage();
  VReqDeconv::default_instance_ = new VReqDeconv();
  VSetting::default_instance_ = new VSetting();
  VResponse::default_instance_ = new VResponse();
  VRecState::default_instance_ = new VRecState();
  VAll::default_instance_ = new VAll();
  VReqFeature::default_instance_ = new VReqFeature();
  VReqWeight::default_instance_ = new VReqWeight();
  VState::default_instance_ = new VState();
  TestProto::default_instance_->InitAsDefaultInstance();
  DContextParameter::default_instance_->InitAsDefaultInstance();
  DModel::default_instance_->InitAsDefaultInstance();
  DetectorParameter::default_instance_->InitAsDefaultInstance();
  MeanValue::default_instance_->InitAsDefaultInstance();
  DetectInput::default_instance_->InitAsDefaultInstance();
  DetectOutput::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  CommuParameter::default_instance_->InitAsDefaultInstance();
  ClassMaps::default_instance_->InitAsDefaultInstance();
  ClassMap::default_instance_->InitAsDefaultInstance();
  Cookie::default_instance_->InitAsDefaultInstance();
  Bytetranfer::default_instance_->InitAsDefaultInstance();
  VLayerInfos::default_instance_->InitAsDefaultInstance();
  VLayerInfo::default_instance_->InitAsDefaultInstance();
  VFeatureMap::default_instance_->InitAsDefaultInstance();
  VImage::default_instance_->InitAsDefaultInstance();
  VReqDeconv::default_instance_->InitAsDefaultInstance();
  VSetting::default_instance_->InitAsDefaultInstance();
  VResponse::default_instance_->InitAsDefaultInstance();
  VRecState::default_instance_->InitAsDefaultInstance();
  VAll::default_instance_->InitAsDefaultInstance();
  VReqFeature::default_instance_->InitAsDefaultInstance();
  VReqWeight::default_instance_->InitAsDefaultInstance();
  VState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zoson_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zoson_2eproto {
  StaticDescriptorInitializer_zoson_2eproto() {
    protobuf_AddDesc_zoson_2eproto();
  }
} static_descriptor_initializer_zoson_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TestProto::kClazzNumFieldNumber;
const int TestProto::kDimFieldNumber;
#endif  // !_MSC_VER

TestProto::TestProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestProto)
}

void TestProto::InitAsDefaultInstance() {
}

TestProto::TestProto(const TestProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TestProto)
}

void TestProto::SharedCtor() {
  _cached_size_ = 0;
  clazz_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestProto::~TestProto() {
  // @@protoc_insertion_point(destructor:TestProto)
  SharedDtor();
}

void TestProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestProto_descriptor_;
}

const TestProto& TestProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

TestProto* TestProto::default_instance_ = NULL;

TestProto* TestProto::New() const {
  return new TestProto;
}

void TestProto::Clear() {
  clazz_num_ = 0;
  dim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 clazz_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clazz_num_)));
          set_has_clazz_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dim;
        break;
      }

      // repeated int32 dim = 2;
      case 2: {
        if (tag == 16) {
         parse_dim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_dim())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dim())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dim;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestProto)
  return false;
#undef DO_
}

void TestProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestProto)
  // required int32 clazz_num = 1;
  if (has_clazz_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clazz_num(), output);
  }

  // repeated int32 dim = 2;
  for (int i = 0; i < this->dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->dim(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TestProto)
}

::google::protobuf::uint8* TestProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestProto)
  // required int32 clazz_num = 1;
  if (has_clazz_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clazz_num(), target);
  }

  // repeated int32 dim = 2;
  for (int i = 0; i < this->dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->dim(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestProto)
  return target;
}

int TestProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 clazz_num = 1;
    if (has_clazz_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clazz_num());
    }

  }
  // repeated int32 dim = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dim_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dim(i));
    }
    total_size += 1 * this->dim_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TestProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestProto::MergeFrom(const TestProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  dim_.MergeFrom(from.dim_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clazz_num()) {
      set_clazz_num(from.clazz_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestProto::CopyFrom(const TestProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestProto::Swap(TestProto* other) {
  if (other != this) {
    std::swap(clazz_num_, other->clazz_num_);
    dim_.Swap(&other->dim_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TestProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestProto_descriptor_;
  metadata.reflection = TestProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DContextParameter::kModelFieldNumber;
const int DContextParameter::kCommuFieldNumber;
#endif  // !_MSC_VER

DContextParameter::DContextParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DContextParameter)
}

void DContextParameter::InitAsDefaultInstance() {
  commu_ = const_cast< ::CommuParameter*>(&::CommuParameter::default_instance());
}

DContextParameter::DContextParameter(const DContextParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DContextParameter)
}

void DContextParameter::SharedCtor() {
  _cached_size_ = 0;
  commu_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DContextParameter::~DContextParameter() {
  // @@protoc_insertion_point(destructor:DContextParameter)
  SharedDtor();
}

void DContextParameter::SharedDtor() {
  if (this != default_instance_) {
    delete commu_;
  }
}

void DContextParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DContextParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DContextParameter_descriptor_;
}

const DContextParameter& DContextParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

DContextParameter* DContextParameter::default_instance_ = NULL;

DContextParameter* DContextParameter::New() const {
  return new DContextParameter;
}

void DContextParameter::Clear() {
  if (has_commu()) {
    if (commu_ != NULL) commu_->::CommuParameter::Clear();
  }
  model_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DContextParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DContextParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DModel model = 1;
      case 1: {
        if (tag == 10) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_model;
        if (input->ExpectTag(26)) goto parse_commu;
        break;
      }

      // optional .CommuParameter commu = 3;
      case 3: {
        if (tag == 26) {
         parse_commu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commu()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DContextParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DContextParameter)
  return false;
#undef DO_
}

void DContextParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DContextParameter)
  // repeated .DModel model = 1;
  for (int i = 0; i < this->model_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->model(i), output);
  }

  // optional .CommuParameter commu = 3;
  if (has_commu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->commu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DContextParameter)
}

::google::protobuf::uint8* DContextParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DContextParameter)
  // repeated .DModel model = 1;
  for (int i = 0; i < this->model_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->model(i), target);
  }

  // optional .CommuParameter commu = 3;
  if (has_commu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->commu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DContextParameter)
  return target;
}

int DContextParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .CommuParameter commu = 3;
    if (has_commu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commu());
    }

  }
  // repeated .DModel model = 1;
  total_size += 1 * this->model_size();
  for (int i = 0; i < this->model_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->model(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DContextParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DContextParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DContextParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DContextParameter::MergeFrom(const DContextParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  model_.MergeFrom(from.model_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_commu()) {
      mutable_commu()->::CommuParameter::MergeFrom(from.commu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DContextParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DContextParameter::CopyFrom(const DContextParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DContextParameter::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->model())) return false;
  return true;
}

void DContextParameter::Swap(DContextParameter* other) {
  if (other != this) {
    model_.Swap(&other->model_);
    std::swap(commu_, other->commu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DContextParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DContextParameter_descriptor_;
  metadata.reflection = DContextParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DModel::kPathFieldNumber;
const int DModel::kModelFieldNumber;
#endif  // !_MSC_VER

DModel::DModel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DModel)
}

void DModel::InitAsDefaultInstance() {
  model_ = const_cast< ::DetectorParameter*>(&::DetectorParameter::default_instance());
}

DModel::DModel(const DModel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DModel)
}

void DModel::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DModel::~DModel() {
  // @@protoc_insertion_point(destructor:DModel)
  SharedDtor();
}

void DModel::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
    delete model_;
  }
}

void DModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DModel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DModel_descriptor_;
}

const DModel& DModel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

DModel* DModel::default_instance_ = NULL;

DModel* DModel::New() const {
  return new DModel;
}

void DModel::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    if (has_model()) {
      if (model_ != NULL) model_->::DetectorParameter::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // optional .DetectorParameter model = 2;
      case 2: {
        if (tag == 18) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_model()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DModel)
  return false;
#undef DO_
}

void DModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DModel)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional .DetectorParameter model = 2;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->model(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DModel)
}

::google::protobuf::uint8* DModel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DModel)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional .DetectorParameter model = 2;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->model(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DModel)
  return target;
}

int DModel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional .DetectorParameter model = 2;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->model());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DModel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DModel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DModel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DModel::MergeFrom(const DModel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_model()) {
      mutable_model()->::DetectorParameter::MergeFrom(from.model());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DModel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DModel::CopyFrom(const DModel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DModel::IsInitialized() const {

  if (has_model()) {
    if (!this->model().IsInitialized()) return false;
  }
  return true;
}

void DModel::Swap(DModel* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(model_, other->model_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DModel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DModel_descriptor_;
  metadata.reflection = DModel_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DetectorParameter_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectorParameter_Type_descriptor_;
}
bool DetectorParameter_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DetectorParameter_Type DetectorParameter::DETECTOR;
const DetectorParameter_Type DetectorParameter::CLASSIFIER;
const DetectorParameter_Type DetectorParameter::Type_MIN;
const DetectorParameter_Type DetectorParameter::Type_MAX;
const int DetectorParameter::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* DetectorParameter::_default_in_name_ = NULL;
::std::string* DetectorParameter::_default_out_name_ = NULL;
#ifndef _MSC_VER
const int DetectorParameter::kNameFieldNumber;
const int DetectorParameter::kModelFieldNumber;
const int DetectorParameter::kWeightFieldNumber;
const int DetectorParameter::kLabelFieldNumber;
const int DetectorParameter::kUseGpuFieldNumber;
const int DetectorParameter::kIstrainFieldNumber;
const int DetectorParameter::kSolverFieldNumber;
const int DetectorParameter::kMeanFileFieldNumber;
const int DetectorParameter::kMeanFieldNumber;
const int DetectorParameter::kTypeFieldNumber;
const int DetectorParameter::kInNameFieldNumber;
const int DetectorParameter::kOutNameFieldNumber;
#endif  // !_MSC_VER

DetectorParameter::DetectorParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectorParameter)
}

void DetectorParameter::InitAsDefaultInstance() {
  mean_ = const_cast< ::MeanValue*>(&::MeanValue::default_instance());
}

DetectorParameter::DetectorParameter(const DetectorParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DetectorParameter)
}

void DetectorParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  istrain_ = false;
  solver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_ = NULL;
  type_ = 1;
  in_name_ = const_cast< ::std::string*>(_default_in_name_);
  out_name_ = const_cast< ::std::string*>(_default_out_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectorParameter::~DetectorParameter() {
  // @@protoc_insertion_point(destructor:DetectorParameter)
  SharedDtor();
}

void DetectorParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (weight_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete weight_;
  }
  if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete label_;
  }
  if (solver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete solver_;
  }
  if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mean_file_;
  }
  if (in_name_ != _default_in_name_) {
    delete in_name_;
  }
  if (out_name_ != _default_out_name_) {
    delete out_name_;
  }
  if (this != default_instance_) {
    delete mean_;
  }
}

void DetectorParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectorParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectorParameter_descriptor_;
}

const DetectorParameter& DetectorParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

DetectorParameter* DetectorParameter::default_instance_ = NULL;

DetectorParameter* DetectorParameter::New() const {
  return new DetectorParameter;
}

void DetectorParameter::Clear() {
  if (_has_bits_[0 / 32] & 239) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_weight()) {
      if (weight_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        weight_->clear();
      }
    }
    if (has_label()) {
      if (label_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        label_->clear();
      }
    }
    istrain_ = false;
    if (has_solver()) {
      if (solver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        solver_->clear();
      }
    }
    if (has_mean_file()) {
      if (mean_file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mean_file_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    if (has_mean()) {
      if (mean_ != NULL) mean_->::MeanValue::Clear();
    }
    type_ = 1;
    if (has_in_name()) {
      if (in_name_ != _default_in_name_) {
        in_name_->assign(*_default_in_name_);
      }
    }
    if (has_out_name()) {
      if (out_name_ != _default_out_name_) {
        out_name_->assign(*_default_out_name_);
      }
    }
  }
  use_gpu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectorParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectorParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_model;
        break;
      }

      // required string model = 2;
      case 2: {
        if (tag == 18) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weight;
        break;
      }

      // required string weight = 3;
      case 3: {
        if (tag == 26) {
         parse_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weight()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weight().data(), this->weight().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "weight");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_label;
        break;
      }

      // optional string label = 4;
      case 4: {
        if (tag == 34) {
         parse_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->label().data(), this->label().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "label");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_use_gpu;
        break;
      }

      // repeated int32 use_gpu = 5;
      case 5: {
        if (tag == 40) {
         parse_use_gpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_use_gpu())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_use_gpu())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_use_gpu;
        if (input->ExpectTag(64)) goto parse_istrain;
        break;
      }

      // optional bool istrain = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_istrain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrain_)));
          set_has_istrain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_solver;
        break;
      }

      // optional string solver = 9;
      case 9: {
        if (tag == 74) {
         parse_solver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->solver().data(), this->solver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "solver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_mean_file;
        break;
      }

      // optional string mean_file = 10;
      case 10: {
        if (tag == 82) {
         parse_mean_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mean_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_mean;
        break;
      }

      // optional .MeanValue mean = 11;
      case 11: {
        if (tag == 90) {
         parse_mean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mean()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_type;
        break;
      }

      // optional .DetectorParameter.Type type = 12 [default = DETECTOR];
      case 12: {
        if (tag == 96) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DetectorParameter_Type_IsValid(value)) {
            set_type(static_cast< ::DetectorParameter_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_in_name;
        break;
      }

      // optional string in_name = 13 [default = "data"];
      case 13: {
        if (tag == 106) {
         parse_in_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_in_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->in_name().data(), this->in_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "in_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_out_name;
        break;
      }

      // optional string out_name = 14 [default = "detection_out"];
      case 14: {
        if (tag == 114) {
         parse_out_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_out_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->out_name().data(), this->out_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "out_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectorParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectorParameter)
  return false;
#undef DO_
}

void DetectorParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectorParameter)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string model = 2;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model(), output);
  }

  // required string weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "weight");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->weight(), output);
  }

  // optional string label = 4;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->label(), output);
  }

  // repeated int32 use_gpu = 5;
  for (int i = 0; i < this->use_gpu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->use_gpu(i), output);
  }

  // optional bool istrain = 8 [default = false];
  if (has_istrain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->istrain(), output);
  }

  // optional string solver = 9;
  if (has_solver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->solver().data(), this->solver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "solver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->solver(), output);
  }

  // optional string mean_file = 10;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->mean_file(), output);
  }

  // optional .MeanValue mean = 11;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->mean(), output);
  }

  // optional .DetectorParameter.Type type = 12 [default = DETECTOR];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->type(), output);
  }

  // optional string in_name = 13 [default = "data"];
  if (has_in_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in_name().data(), this->in_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "in_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->in_name(), output);
  }

  // optional string out_name = 14 [default = "detection_out"];
  if (has_out_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out_name().data(), this->out_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "out_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->out_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectorParameter)
}

::google::protobuf::uint8* DetectorParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectorParameter)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string model = 2;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model(), target);
  }

  // required string weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weight().data(), this->weight().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "weight");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->weight(), target);
  }

  // optional string label = 4;
  if (has_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "label");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->label(), target);
  }

  // repeated int32 use_gpu = 5;
  for (int i = 0; i < this->use_gpu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->use_gpu(i), target);
  }

  // optional bool istrain = 8 [default = false];
  if (has_istrain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->istrain(), target);
  }

  // optional string solver = 9;
  if (has_solver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->solver().data(), this->solver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "solver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->solver(), target);
  }

  // optional string mean_file = 10;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->mean_file(), target);
  }

  // optional .MeanValue mean = 11;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->mean(), target);
  }

  // optional .DetectorParameter.Type type = 12 [default = DETECTOR];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->type(), target);
  }

  // optional string in_name = 13 [default = "data"];
  if (has_in_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->in_name().data(), this->in_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "in_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->in_name(), target);
  }

  // optional string out_name = 14 [default = "detection_out"];
  if (has_out_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->out_name().data(), this->out_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "out_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->out_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectorParameter)
  return target;
}

int DetectorParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string model = 2;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // required string weight = 3;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weight());
    }

    // optional string label = 4;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }

    // optional bool istrain = 8 [default = false];
    if (has_istrain()) {
      total_size += 1 + 1;
    }

    // optional string solver = 9;
    if (has_solver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->solver());
    }

    // optional string mean_file = 10;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MeanValue mean = 11;
    if (has_mean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mean());
    }

    // optional .DetectorParameter.Type type = 12 [default = DETECTOR];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string in_name = 13 [default = "data"];
    if (has_in_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->in_name());
    }

    // optional string out_name = 14 [default = "detection_out"];
    if (has_out_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->out_name());
    }

  }
  // repeated int32 use_gpu = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->use_gpu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->use_gpu(i));
    }
    total_size += 1 * this->use_gpu_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectorParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectorParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectorParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectorParameter::MergeFrom(const DetectorParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  use_gpu_.MergeFrom(from.use_gpu_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_istrain()) {
      set_istrain(from.istrain());
    }
    if (from.has_solver()) {
      set_solver(from.solver());
    }
    if (from.has_mean_file()) {
      set_mean_file(from.mean_file());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mean()) {
      mutable_mean()->::MeanValue::MergeFrom(from.mean());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_in_name()) {
      set_in_name(from.in_name());
    }
    if (from.has_out_name()) {
      set_out_name(from.out_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectorParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectorParameter::CopyFrom(const DetectorParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectorParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DetectorParameter::Swap(DetectorParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(model_, other->model_);
    std::swap(weight_, other->weight_);
    std::swap(label_, other->label_);
    use_gpu_.Swap(&other->use_gpu_);
    std::swap(istrain_, other->istrain_);
    std::swap(solver_, other->solver_);
    std::swap(mean_file_, other->mean_file_);
    std::swap(mean_, other->mean_);
    std::swap(type_, other->type_);
    std::swap(in_name_, other->in_name_);
    std::swap(out_name_, other->out_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectorParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectorParameter_descriptor_;
  metadata.reflection = DetectorParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeanValue::kValueFieldNumber;
const int MeanValue::kScaleFieldNumber;
#endif  // !_MSC_VER

MeanValue::MeanValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MeanValue)
}

void MeanValue::InitAsDefaultInstance() {
}

MeanValue::MeanValue(const MeanValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MeanValue)
}

void MeanValue::SharedCtor() {
  _cached_size_ = 0;
  scale_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeanValue::~MeanValue() {
  // @@protoc_insertion_point(destructor:MeanValue)
  SharedDtor();
}

void MeanValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MeanValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeanValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeanValue_descriptor_;
}

const MeanValue& MeanValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

MeanValue* MeanValue::default_instance_ = NULL;

MeanValue* MeanValue::New() const {
  return new MeanValue;
}

void MeanValue::Clear() {
  scale_ = 1;
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeanValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MeanValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1;
      case 1: {
        if (tag == 13) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_value())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(13)) goto parse_value;
        if (input->ExpectTag(21)) goto parse_scale;
        break;
      }

      // optional float scale = 2 [default = 1];
      case 2: {
        if (tag == 21) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MeanValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MeanValue)
  return false;
#undef DO_
}

void MeanValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MeanValue)
  // repeated float value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->value(i), output);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MeanValue)
}

::google::protobuf::uint8* MeanValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MeanValue)
  // repeated float value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->value(i), target);
  }

  // optional float scale = 2 [default = 1];
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MeanValue)
  return target;
}

int MeanValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float scale = 2 [default = 1];
    if (has_scale()) {
      total_size += 1 + 4;
    }

  }
  // repeated float value = 1;
  {
    int data_size = 0;
    data_size = 4 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeanValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeanValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeanValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeanValue::MergeFrom(const MeanValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeanValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeanValue::CopyFrom(const MeanValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeanValue::IsInitialized() const {

  return true;
}

void MeanValue::Swap(MeanValue* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeanValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeanValue_descriptor_;
  metadata.reflection = MeanValue_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DetectInput_Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectInput_Format_descriptor_;
}
bool DetectInput_Format_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DetectInput_Format DetectInput::JPG;
const DetectInput_Format DetectInput::PNG;
const DetectInput_Format DetectInput::RGB;
const DetectInput_Format DetectInput::YOV_420;
const DetectInput_Format DetectInput::YOV_422;
const DetectInput_Format DetectInput::Format_MIN;
const DetectInput_Format DetectInput::Format_MAX;
const int DetectInput::Format_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DetectInput::kWidthFieldNumber;
const int DetectInput::kHeightFieldNumber;
const int DetectInput::kDataFieldNumber;
#endif  // !_MSC_VER

DetectInput::DetectInput()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectInput)
}

void DetectInput::InitAsDefaultInstance() {
}

DetectInput::DetectInput(const DetectInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DetectInput)
}

void DetectInput::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectInput::~DetectInput() {
  // @@protoc_insertion_point(destructor:DetectInput)
  SharedDtor();
}

void DetectInput::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void DetectInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectInput_descriptor_;
}

const DetectInput& DetectInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

DetectInput* DetectInput::default_instance_ = NULL;

DetectInput* DetectInput::New() const {
  return new DetectInput;
}

void DetectInput::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DetectInput*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(width_, height_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 width = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // required int32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectInput)
  return false;
#undef DO_
}

void DetectInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectInput)
  // required int32 width = 2;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // required int32 height = 3;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // required bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectInput)
}

::google::protobuf::uint8* DetectInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectInput)
  // required int32 width = 2;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // required int32 height = 3;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->height(), target);
  }

  // required bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectInput)
  return target;
}

int DetectInput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 width = 2;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 3;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectInput::MergeFrom(const DetectInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectInput::CopyFrom(const DetectInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DetectInput::Swap(DetectInput* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectInput_descriptor_;
  metadata.reflection = DetectInput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectOutput::kResultsFieldNumber;
#endif  // !_MSC_VER

DetectOutput::DetectOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DetectOutput)
}

void DetectOutput::InitAsDefaultInstance() {
}

DetectOutput::DetectOutput(const DetectOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DetectOutput)
}

void DetectOutput::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectOutput::~DetectOutput() {
  // @@protoc_insertion_point(destructor:DetectOutput)
  SharedDtor();
}

void DetectOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DetectOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectOutput_descriptor_;
}

const DetectOutput& DetectOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

DetectOutput* DetectOutput::default_instance_ = NULL;

DetectOutput* DetectOutput::New() const {
  return new DetectOutput;
}

void DetectOutput::Clear() {
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DetectOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Result results = 1;
      case 1: {
        if (tag == 10) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_results;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DetectOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DetectOutput)
  return false;
#undef DO_
}

void DetectOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DetectOutput)
  // repeated .Result results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DetectOutput)
}

::google::protobuf::uint8* DetectOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DetectOutput)
  // repeated .Result results = 1;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DetectOutput)
  return target;
}

int DetectOutput::ByteSize() const {
  int total_size = 0;

  // repeated .Result results = 1;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectOutput::MergeFrom(const DetectOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectOutput::CopyFrom(const DetectOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectOutput::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void DetectOutput::Swap(DetectOutput* other) {
  if (other != this) {
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectOutput_descriptor_;
  metadata.reflection = DetectOutput_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Result::kXminFieldNumber;
const int Result::kYminFieldNumber;
const int Result::kXmaxFieldNumber;
const int Result::kYmaxFieldNumber;
const int Result::kClazzFieldNumber;
const int Result::kScoreFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Result)
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Result)
}

void Result::SharedCtor() {
  _cached_size_ = 0;
  xmin_ = 0;
  ymin_ = 0;
  xmax_ = 0;
  ymax_ = 0;
  clazz_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Result*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(xmin_, score_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float xmin = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xmin_)));
          set_has_xmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ymin;
        break;
      }

      // required float ymin = 2;
      case 2: {
        if (tag == 21) {
         parse_ymin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ymin_)));
          set_has_ymin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_xmax;
        break;
      }

      // required float xmax = 3;
      case 3: {
        if (tag == 29) {
         parse_xmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xmax_)));
          set_has_xmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_ymax;
        break;
      }

      // required float ymax = 4;
      case 4: {
        if (tag == 37) {
         parse_ymax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ymax_)));
          set_has_ymax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_clazz;
        break;
      }

      // required int32 clazz = 5;
      case 5: {
        if (tag == 40) {
         parse_clazz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clazz_)));
          set_has_clazz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_score;
        break;
      }

      // required float score = 6;
      case 6: {
        if (tag == 53) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Result)
  // required float xmin = 1;
  if (has_xmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->xmin(), output);
  }

  // required float ymin = 2;
  if (has_ymin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->ymin(), output);
  }

  // required float xmax = 3;
  if (has_xmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->xmax(), output);
  }

  // required float ymax = 4;
  if (has_ymax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ymax(), output);
  }

  // required int32 clazz = 5;
  if (has_clazz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clazz(), output);
  }

  // required float score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Result)
  // required float xmin = 1;
  if (has_xmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->xmin(), target);
  }

  // required float ymin = 2;
  if (has_ymin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->ymin(), target);
  }

  // required float xmax = 3;
  if (has_xmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->xmax(), target);
  }

  // required float ymax = 4;
  if (has_ymax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ymax(), target);
  }

  // required int32 clazz = 5;
  if (has_clazz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->clazz(), target);
  }

  // required float score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Result)
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float xmin = 1;
    if (has_xmin()) {
      total_size += 1 + 4;
    }

    // required float ymin = 2;
    if (has_ymin()) {
      total_size += 1 + 4;
    }

    // required float xmax = 3;
    if (has_xmax()) {
      total_size += 1 + 4;
    }

    // required float ymax = 4;
    if (has_ymax()) {
      total_size += 1 + 4;
    }

    // required int32 clazz = 5;
    if (has_clazz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clazz());
    }

    // required float score = 6;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xmin()) {
      set_xmin(from.xmin());
    }
    if (from.has_ymin()) {
      set_ymin(from.ymin());
    }
    if (from.has_xmax()) {
      set_xmax(from.xmax());
    }
    if (from.has_ymax()) {
      set_ymax(from.ymax());
    }
    if (from.has_clazz()) {
      set_clazz(from.clazz());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    std::swap(xmin_, other->xmin_);
    std::swap(ymin_, other->ymin_);
    std::swap(xmax_, other->xmax_);
    std::swap(ymax_, other->ymax_);
    std::swap(clazz_, other->clazz_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CommuParameter_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommuParameter_Type_descriptor_;
}
bool CommuParameter_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CommuParameter_Type CommuParameter::LOC;
const CommuParameter_Type CommuParameter::IPC;
const CommuParameter_Type CommuParameter::TCP;
const CommuParameter_Type CommuParameter::RTMP;
const CommuParameter_Type CommuParameter::Type_MIN;
const CommuParameter_Type CommuParameter::Type_MAX;
const int CommuParameter::Type_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* CommuParameter::_default_address_ = NULL;
::std::string* CommuParameter::_default_client_name_ = NULL;
#ifndef _MSC_VER
const int CommuParameter::kAddressFieldNumber;
const int CommuParameter::kPortFieldNumber;
const int CommuParameter::kClientNameFieldNumber;
const int CommuParameter::kTypeFieldNumber;
#endif  // !_MSC_VER

CommuParameter::CommuParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CommuParameter)
}

void CommuParameter::InitAsDefaultInstance() {
}

CommuParameter::CommuParameter(const CommuParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CommuParameter)
}

void CommuParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(_default_address_);
  port_ = 10086;
  client_name_ = const_cast< ::std::string*>(_default_client_name_);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommuParameter::~CommuParameter() {
  // @@protoc_insertion_point(destructor:CommuParameter)
  SharedDtor();
}

void CommuParameter::SharedDtor() {
  if (address_ != _default_address_) {
    delete address_;
  }
  if (client_name_ != _default_client_name_) {
    delete client_name_;
  }
  if (this != default_instance_) {
  }
}

void CommuParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommuParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommuParameter_descriptor_;
}

const CommuParameter& CommuParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

CommuParameter* CommuParameter::default_instance_ = NULL;

CommuParameter* CommuParameter::New() const {
  return new CommuParameter;
}

void CommuParameter::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_address()) {
      if (address_ != _default_address_) {
        address_->assign(*_default_address_);
      }
    }
    port_ = 10086;
    if (has_client_name()) {
      if (client_name_ != _default_client_name_) {
        client_name_->assign(*_default_client_name_);
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommuParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CommuParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1 [default = "localhost"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "address");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2 [default = 10086];
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_client_name;
        break;
      }

      // optional string client_name = 3 [default = "web"];
      case 3: {
        if (tag == 26) {
         parse_client_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .CommuParameter.Type type = 4 [default = LOC];
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CommuParameter_Type_IsValid(value)) {
            set_type(static_cast< ::CommuParameter_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CommuParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CommuParameter)
  return false;
#undef DO_
}

void CommuParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CommuParameter)
  // optional string address = 1 [default = "localhost"];
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  // optional int32 port = 2 [default = 10086];
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // optional string client_name = 3 [default = "web"];
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->client_name(), output);
  }

  // optional .CommuParameter.Type type = 4 [default = LOC];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CommuParameter)
}

::google::protobuf::uint8* CommuParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CommuParameter)
  // optional string address = 1 [default = "localhost"];
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // optional int32 port = 2 [default = 10086];
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // optional string client_name = 3 [default = "web"];
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->client_name(), target);
  }

  // optional .CommuParameter.Type type = 4 [default = LOC];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CommuParameter)
  return target;
}

int CommuParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string address = 1 [default = "localhost"];
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional int32 port = 2 [default = 10086];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string client_name = 3 [default = "web"];
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }

    // optional .CommuParameter.Type type = 4 [default = LOC];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommuParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommuParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommuParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommuParameter::MergeFrom(const CommuParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_client_name()) {
      set_client_name(from.client_name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommuParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommuParameter::CopyFrom(const CommuParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommuParameter::IsInitialized() const {

  return true;
}

void CommuParameter::Swap(CommuParameter* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(client_name_, other->client_name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommuParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommuParameter_descriptor_;
  metadata.reflection = CommuParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClassMaps::kItemFieldNumber;
#endif  // !_MSC_VER

ClassMaps::ClassMaps()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClassMaps)
}

void ClassMaps::InitAsDefaultInstance() {
}

ClassMaps::ClassMaps(const ClassMaps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClassMaps)
}

void ClassMaps::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassMaps::~ClassMaps() {
  // @@protoc_insertion_point(destructor:ClassMaps)
  SharedDtor();
}

void ClassMaps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClassMaps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassMaps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassMaps_descriptor_;
}

const ClassMaps& ClassMaps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

ClassMaps* ClassMaps::default_instance_ = NULL;

ClassMaps* ClassMaps::New() const {
  return new ClassMaps;
}

void ClassMaps::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClassMaps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClassMaps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ClassMap item = 1;
      case 1: {
        if (tag == 10) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClassMaps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClassMaps)
  return false;
#undef DO_
}

void ClassMaps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClassMaps)
  // repeated .ClassMap item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClassMaps)
}

::google::protobuf::uint8* ClassMaps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClassMaps)
  // repeated .ClassMap item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClassMaps)
  return target;
}

int ClassMaps::ByteSize() const {
  int total_size = 0;

  // repeated .ClassMap item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassMaps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClassMaps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClassMaps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClassMaps::MergeFrom(const ClassMaps& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClassMaps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassMaps::CopyFrom(const ClassMaps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassMaps::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void ClassMaps::Swap(ClassMaps* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClassMaps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassMaps_descriptor_;
  metadata.reflection = ClassMaps_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClassMap::kNameFieldNumber;
const int ClassMap::kLabelFieldNumber;
const int ClassMap::kDisplayNameFieldNumber;
#endif  // !_MSC_VER

ClassMap::ClassMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClassMap)
}

void ClassMap::InitAsDefaultInstance() {
}

ClassMap::ClassMap(const ClassMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ClassMap)
}

void ClassMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  label_ = 0;
  display_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClassMap::~ClassMap() {
  // @@protoc_insertion_point(destructor:ClassMap)
  SharedDtor();
}

void ClassMap::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete display_name_;
  }
  if (this != default_instance_) {
  }
}

void ClassMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClassMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClassMap_descriptor_;
}

const ClassMap& ClassMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

ClassMap* ClassMap::default_instance_ = NULL;

ClassMap* ClassMap::New() const {
  return new ClassMap;
}

void ClassMap::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    label_ = 0;
    if (has_display_name()) {
      if (display_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        display_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClassMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClassMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_label;
        break;
      }

      // required int32 label = 2;
      case 2: {
        if (tag == 16) {
         parse_label:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &label_)));
          set_has_label();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_display_name;
        break;
      }

      // required string display_name = 3;
      case 3: {
        if (tag == 26) {
         parse_display_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display_name().data(), this->display_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "display_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClassMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClassMap)
  return false;
#undef DO_
}

void ClassMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClassMap)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 label = 2;
  if (has_label()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->label(), output);
  }

  // required string display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->display_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ClassMap)
}

::google::protobuf::uint8* ClassMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ClassMap)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 label = 2;
  if (has_label()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->label(), target);
  }

  // required string display_name = 3;
  if (has_display_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display_name().data(), this->display_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->display_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClassMap)
  return target;
}

int ClassMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 label = 2;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->label());
    }

    // required string display_name = 3;
    if (has_display_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClassMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClassMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClassMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClassMap::MergeFrom(const ClassMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_label()) {
      set_label(from.label());
    }
    if (from.has_display_name()) {
      set_display_name(from.display_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClassMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClassMap::CopyFrom(const ClassMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClassMap::Swap(ClassMap* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(label_, other->label_);
    std::swap(display_name_, other->display_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClassMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClassMap_descriptor_;
  metadata.reflection = ClassMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Cookie::kIDFieldNumber;
const int Cookie::kNameFieldNumber;
#endif  // !_MSC_VER

Cookie::Cookie()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cookie)
}

void Cookie::InitAsDefaultInstance() {
}

Cookie::Cookie(const Cookie& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cookie)
}

void Cookie::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Cookie::~Cookie() {
  // @@protoc_insertion_point(destructor:Cookie)
  SharedDtor();
}

void Cookie::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Cookie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Cookie::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Cookie_descriptor_;
}

const Cookie& Cookie::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

Cookie* Cookie::default_instance_ = NULL;

Cookie* Cookie::New() const {
  return new Cookie;
}

void Cookie::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Cookie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cookie)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cookie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cookie)
  return false;
#undef DO_
}

void Cookie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cookie)
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cookie)
}

::google::protobuf::uint8* Cookie::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cookie)
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cookie)
  return target;
}

int Cookie::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Cookie::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Cookie* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Cookie*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Cookie::MergeFrom(const Cookie& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Cookie::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cookie::CopyFrom(const Cookie& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cookie::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Cookie::Swap(Cookie* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Cookie::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Cookie_descriptor_;
  metadata.reflection = Cookie_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bytetranfer::kCountFieldNumber;
#endif  // !_MSC_VER

Bytetranfer::Bytetranfer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Bytetranfer)
}

void Bytetranfer::InitAsDefaultInstance() {
}

Bytetranfer::Bytetranfer(const Bytetranfer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Bytetranfer)
}

void Bytetranfer::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bytetranfer::~Bytetranfer() {
  // @@protoc_insertion_point(destructor:Bytetranfer)
  SharedDtor();
}

void Bytetranfer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Bytetranfer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bytetranfer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bytetranfer_descriptor_;
}

const Bytetranfer& Bytetranfer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

Bytetranfer* Bytetranfer::default_instance_ = NULL;

Bytetranfer* Bytetranfer::New() const {
  return new Bytetranfer;
}

void Bytetranfer::Clear() {
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bytetranfer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Bytetranfer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Bytetranfer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Bytetranfer)
  return false;
#undef DO_
}

void Bytetranfer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Bytetranfer)
  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Bytetranfer)
}

::google::protobuf::uint8* Bytetranfer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Bytetranfer)
  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Bytetranfer)
  return target;
}

int Bytetranfer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bytetranfer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bytetranfer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bytetranfer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bytetranfer::MergeFrom(const Bytetranfer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bytetranfer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bytetranfer::CopyFrom(const Bytetranfer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bytetranfer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Bytetranfer::Swap(Bytetranfer* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bytetranfer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bytetranfer_descriptor_;
  metadata.reflection = Bytetranfer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VLayerInfos::kInfosFieldNumber;
#endif  // !_MSC_VER

VLayerInfos::VLayerInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VLayerInfos)
}

void VLayerInfos::InitAsDefaultInstance() {
}

VLayerInfos::VLayerInfos(const VLayerInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VLayerInfos)
}

void VLayerInfos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VLayerInfos::~VLayerInfos() {
  // @@protoc_insertion_point(destructor:VLayerInfos)
  SharedDtor();
}

void VLayerInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VLayerInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VLayerInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VLayerInfos_descriptor_;
}

const VLayerInfos& VLayerInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

VLayerInfos* VLayerInfos::default_instance_ = NULL;

VLayerInfos* VLayerInfos::New() const {
  return new VLayerInfos;
}

void VLayerInfos::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VLayerInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VLayerInfos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VLayerInfo infos = 1;
      case 1: {
        if (tag == 10) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VLayerInfos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VLayerInfos)
  return false;
#undef DO_
}

void VLayerInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VLayerInfos)
  // repeated .VLayerInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VLayerInfos)
}

::google::protobuf::uint8* VLayerInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VLayerInfos)
  // repeated .VLayerInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VLayerInfos)
  return target;
}

int VLayerInfos::ByteSize() const {
  int total_size = 0;

  // repeated .VLayerInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VLayerInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VLayerInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VLayerInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VLayerInfos::MergeFrom(const VLayerInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VLayerInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VLayerInfos::CopyFrom(const VLayerInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VLayerInfos::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->infos())) return false;
  return true;
}

void VLayerInfos::Swap(VLayerInfos* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VLayerInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VLayerInfos_descriptor_;
  metadata.reflection = VLayerInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VLayerInfo::kIndexFieldNumber;
const int VLayerInfo::kNameFieldNumber;
const int VLayerInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

VLayerInfo::VLayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VLayerInfo)
}

void VLayerInfo::InitAsDefaultInstance() {
}

VLayerInfo::VLayerInfo(const VLayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VLayerInfo)
}

void VLayerInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VLayerInfo::~VLayerInfo() {
  // @@protoc_insertion_point(destructor:VLayerInfo)
  SharedDtor();
}

void VLayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void VLayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VLayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VLayerInfo_descriptor_;
}

const VLayerInfo& VLayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

VLayerInfo* VLayerInfo::default_instance_ = NULL;

VLayerInfo* VLayerInfo::New() const {
  return new VLayerInfo;
}

void VLayerInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    index_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VLayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VLayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VLayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VLayerInfo)
  return false;
#undef DO_
}

void VLayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VLayerInfo)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VLayerInfo)
}

::google::protobuf::uint8* VLayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VLayerInfo)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VLayerInfo)
  return target;
}

int VLayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VLayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VLayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VLayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VLayerInfo::MergeFrom(const VLayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VLayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VLayerInfo::CopyFrom(const VLayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VLayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VLayerInfo::Swap(VLayerInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VLayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VLayerInfo_descriptor_;
  metadata.reflection = VLayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VFeatureMap::kWidthFieldNumber;
const int VFeatureMap::kHeightFieldNumber;
const int VFeatureMap::kNumFieldNumber;
const int VFeatureMap::kChannelFieldNumber;
const int VFeatureMap::kDataFieldNumber;
#endif  // !_MSC_VER

VFeatureMap::VFeatureMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VFeatureMap)
}

void VFeatureMap::InitAsDefaultInstance() {
}

VFeatureMap::VFeatureMap(const VFeatureMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VFeatureMap)
}

void VFeatureMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  num_ = 0;
  channel_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VFeatureMap::~VFeatureMap() {
  // @@protoc_insertion_point(destructor:VFeatureMap)
  SharedDtor();
}

void VFeatureMap::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void VFeatureMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VFeatureMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VFeatureMap_descriptor_;
}

const VFeatureMap& VFeatureMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

VFeatureMap* VFeatureMap::default_instance_ = NULL;

VFeatureMap* VFeatureMap::New() const {
  return new VFeatureMap;
}

void VFeatureMap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VFeatureMap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(width_, channel_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VFeatureMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VFeatureMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_channel;
        break;
      }

      // required int32 channel = 4;
      case 4: {
        if (tag == 32) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // required bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VFeatureMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VFeatureMap)
  return false;
#undef DO_
}

void VFeatureMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VFeatureMap)
  // required int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // required int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // required int32 channel = 4;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->channel(), output);
  }

  // required bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VFeatureMap)
}

::google::protobuf::uint8* VFeatureMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VFeatureMap)
  // required int32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // required int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // required int32 channel = 4;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->channel(), target);
  }

  // required bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VFeatureMap)
  return target;
}

int VFeatureMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 channel = 4;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // required bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VFeatureMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VFeatureMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VFeatureMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VFeatureMap::MergeFrom(const VFeatureMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VFeatureMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VFeatureMap::CopyFrom(const VFeatureMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VFeatureMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void VFeatureMap::Swap(VFeatureMap* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(num_, other->num_);
    std::swap(channel_, other->channel_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VFeatureMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VFeatureMap_descriptor_;
  metadata.reflection = VFeatureMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VImage::kWidthFieldNumber;
const int VImage::kHeightFieldNumber;
const int VImage::kChannelFieldNumber;
const int VImage::kDataFieldNumber;
#endif  // !_MSC_VER

VImage::VImage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VImage)
}

void VImage::InitAsDefaultInstance() {
}

VImage::VImage(const VImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VImage)
}

void VImage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  width_ = 0;
  height_ = 0;
  channel_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VImage::~VImage() {
  // @@protoc_insertion_point(destructor:VImage)
  SharedDtor();
}

void VImage::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void VImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VImage_descriptor_;
}

const VImage& VImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

VImage* VImage::default_instance_ = NULL;

VImage* VImage::New() const {
  return new VImage;
}

void VImage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VImage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(width_, height_);
    channel_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_channel;
        break;
      }

      // required int32 channel = 3;
      case 3: {
        if (tag == 24) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // required bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VImage)
  return false;
#undef DO_
}

void VImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VImage)
  // required int32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // required int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // required int32 channel = 3;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->channel(), output);
  }

  // required bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VImage)
}

::google::protobuf::uint8* VImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VImage)
  // required int32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // required int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // required int32 channel = 3;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->channel(), target);
  }

  // required bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VImage)
  return target;
}

int VImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

    // required int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }

    // required int32 channel = 3;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

    // required bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VImage::MergeFrom(const VImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VImage::CopyFrom(const VImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void VImage::Swap(VImage* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(channel_, other->channel_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VImage_descriptor_;
  metadata.reflection = VImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VReqDeconv::kILayerFieldNumber;
const int VReqDeconv::kIMapFieldNumber;
const int VReqDeconv::kDoDeconvFieldNumber;
#endif  // !_MSC_VER

VReqDeconv::VReqDeconv()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VReqDeconv)
}

void VReqDeconv::InitAsDefaultInstance() {
}

VReqDeconv::VReqDeconv(const VReqDeconv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VReqDeconv)
}

void VReqDeconv::SharedCtor() {
  _cached_size_ = 0;
  i_layer_ = 0;
  i_map_ = 0;
  do_deconv_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VReqDeconv::~VReqDeconv() {
  // @@protoc_insertion_point(destructor:VReqDeconv)
  SharedDtor();
}

void VReqDeconv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VReqDeconv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VReqDeconv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VReqDeconv_descriptor_;
}

const VReqDeconv& VReqDeconv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

VReqDeconv* VReqDeconv::default_instance_ = NULL;

VReqDeconv* VReqDeconv::New() const {
  return new VReqDeconv;
}

void VReqDeconv::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VReqDeconv*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(i_layer_, do_deconv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VReqDeconv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VReqDeconv)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 i_layer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_layer_)));
          set_has_i_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_i_map;
        break;
      }

      // required int32 i_map = 2;
      case 2: {
        if (tag == 16) {
         parse_i_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_map_)));
          set_has_i_map();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_do_deconv;
        break;
      }

      // optional bool do_deconv = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_do_deconv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_deconv_)));
          set_has_do_deconv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VReqDeconv)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VReqDeconv)
  return false;
#undef DO_
}

void VReqDeconv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VReqDeconv)
  // required int32 i_layer = 1;
  if (has_i_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->i_layer(), output);
  }

  // required int32 i_map = 2;
  if (has_i_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->i_map(), output);
  }

  // optional bool do_deconv = 3 [default = false];
  if (has_do_deconv()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->do_deconv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VReqDeconv)
}

::google::protobuf::uint8* VReqDeconv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VReqDeconv)
  // required int32 i_layer = 1;
  if (has_i_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->i_layer(), target);
  }

  // required int32 i_map = 2;
  if (has_i_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->i_map(), target);
  }

  // optional bool do_deconv = 3 [default = false];
  if (has_do_deconv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->do_deconv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VReqDeconv)
  return target;
}

int VReqDeconv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 i_layer = 1;
    if (has_i_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i_layer());
    }

    // required int32 i_map = 2;
    if (has_i_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i_map());
    }

    // optional bool do_deconv = 3 [default = false];
    if (has_do_deconv()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VReqDeconv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VReqDeconv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VReqDeconv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VReqDeconv::MergeFrom(const VReqDeconv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_i_layer()) {
      set_i_layer(from.i_layer());
    }
    if (from.has_i_map()) {
      set_i_map(from.i_map());
    }
    if (from.has_do_deconv()) {
      set_do_deconv(from.do_deconv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VReqDeconv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VReqDeconv::CopyFrom(const VReqDeconv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VReqDeconv::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VReqDeconv::Swap(VReqDeconv* other) {
  if (other != this) {
    std::swap(i_layer_, other->i_layer_);
    std::swap(i_map_, other->i_map_);
    std::swap(do_deconv_, other->do_deconv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VReqDeconv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VReqDeconv_descriptor_;
  metadata.reflection = VReqDeconv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VSetting::kModelFieldNumber;
const int VSetting::kSolverFieldNumber;
const int VSetting::kTestFieldNumber;
const int VSetting::kIntervalFieldNumber;
#endif  // !_MSC_VER

VSetting::VSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VSetting)
}

void VSetting::InitAsDefaultInstance() {
}

VSetting::VSetting(const VSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VSetting)
}

void VSetting::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  solver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  test_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  interval_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VSetting::~VSetting() {
  // @@protoc_insertion_point(destructor:VSetting)
  SharedDtor();
}

void VSetting::SharedDtor() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (solver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete solver_;
  }
  if (test_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete test_;
  }
  if (this != default_instance_) {
  }
}

void VSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VSetting_descriptor_;
}

const VSetting& VSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

VSetting* VSetting::default_instance_ = NULL;

VSetting* VSetting::New() const {
  return new VSetting;
}

void VSetting::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_solver()) {
      if (solver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        solver_->clear();
      }
    }
    if (has_test()) {
      if (test_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        test_->clear();
      }
    }
    interval_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VSetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string model = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_solver;
        break;
      }

      // required string solver = 2;
      case 2: {
        if (tag == 18) {
         parse_solver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->solver().data(), this->solver().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "solver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_test;
        break;
      }

      // required string test = 3;
      case 3: {
        if (tag == 26) {
         parse_test:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_test()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->test().data(), this->test().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "test");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_interval;
        break;
      }

      // optional int32 interval = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VSetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VSetting)
  return false;
#undef DO_
}

void VSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VSetting)
  // required string model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model(), output);
  }

  // required string solver = 2;
  if (has_solver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->solver().data(), this->solver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "solver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->solver(), output);
  }

  // required string test = 3;
  if (has_test()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->test(), output);
  }

  // optional int32 interval = 4 [default = -1];
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VSetting)
}

::google::protobuf::uint8* VSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VSetting)
  // required string model = 1;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model(), target);
  }

  // required string solver = 2;
  if (has_solver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->solver().data(), this->solver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "solver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->solver(), target);
  }

  // required string test = 3;
  if (has_test()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->test().data(), this->test().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "test");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->test(), target);
  }

  // optional int32 interval = 4 [default = -1];
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VSetting)
  return target;
}

int VSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string model = 1;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // required string solver = 2;
    if (has_solver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->solver());
    }

    // required string test = 3;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->test());
    }

    // optional int32 interval = 4 [default = -1];
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VSetting::MergeFrom(const VSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_solver()) {
      set_solver(from.solver());
    }
    if (from.has_test()) {
      set_test(from.test());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VSetting::CopyFrom(const VSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VSetting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VSetting::Swap(VSetting* other) {
  if (other != this) {
    std::swap(model_, other->model_);
    std::swap(solver_, other->solver_);
    std::swap(test_, other->test_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VSetting_descriptor_;
  metadata.reflection = VSetting_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* VResponse_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VResponse_Type_descriptor_;
}
bool VResponse_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const VResponse_Type VResponse::WEIGHT;
const VResponse_Type VResponse::FEATUREMAP;
const VResponse_Type VResponse::LAYERINFOS;
const VResponse_Type VResponse::INPUT;
const VResponse_Type VResponse::DECONV;
const VResponse_Type VResponse::ALL;
const VResponse_Type VResponse::STATE;
const VResponse_Type VResponse::SETTING;
const VResponse_Type VResponse::REC;
const VResponse_Type VResponse::Type_MIN;
const VResponse_Type VResponse::Type_MAX;
const int VResponse::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int VResponse::kTypeFieldNumber;
const int VResponse::kDataFieldNumber;
#endif  // !_MSC_VER

VResponse::VResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VResponse)
}

void VResponse::InitAsDefaultInstance() {
}

VResponse::VResponse(const VResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VResponse)
}

void VResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VResponse::~VResponse() {
  // @@protoc_insertion_point(destructor:VResponse)
  SharedDtor();
}

void VResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void VResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VResponse_descriptor_;
}

const VResponse& VResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

VResponse* VResponse::default_instance_ = NULL;

VResponse* VResponse::New() const {
  return new VResponse;
}

void VResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .VResponse.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::VResponse_Type_IsValid(value)) {
            set_type(static_cast< ::VResponse_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VResponse)
  return false;
#undef DO_
}

void VResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VResponse)
  // required .VResponse.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VResponse)
}

::google::protobuf::uint8* VResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VResponse)
  // required .VResponse.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VResponse)
  return target;
}

int VResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .VResponse.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VResponse::MergeFrom(const VResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VResponse::CopyFrom(const VResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VResponse::Swap(VResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VResponse_descriptor_;
  metadata.reflection = VResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VRecState::kStateFieldNumber;
#endif  // !_MSC_VER

VRecState::VRecState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VRecState)
}

void VRecState::InitAsDefaultInstance() {
}

VRecState::VRecState(const VRecState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VRecState)
}

void VRecState::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VRecState::~VRecState() {
  // @@protoc_insertion_point(destructor:VRecState)
  SharedDtor();
}

void VRecState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VRecState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VRecState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VRecState_descriptor_;
}

const VRecState& VRecState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

VRecState* VRecState::default_instance_ = NULL;

VRecState* VRecState::New() const {
  return new VRecState;
}

void VRecState::Clear() {
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VRecState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VRecState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VRecState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VRecState)
  return false;
#undef DO_
}

void VRecState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VRecState)
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VRecState)
}

::google::protobuf::uint8* VRecState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VRecState)
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VRecState)
  return target;
}

int VRecState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VRecState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VRecState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VRecState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VRecState::MergeFrom(const VRecState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VRecState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VRecState::CopyFrom(const VRecState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRecState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VRecState::Swap(VRecState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VRecState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VRecState_descriptor_;
  metadata.reflection = VRecState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VAll::kResponseFieldNumber;
#endif  // !_MSC_VER

VAll::VAll()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VAll)
}

void VAll::InitAsDefaultInstance() {
}

VAll::VAll(const VAll& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VAll)
}

void VAll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VAll::~VAll() {
  // @@protoc_insertion_point(destructor:VAll)
  SharedDtor();
}

void VAll::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VAll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VAll::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VAll_descriptor_;
}

const VAll& VAll::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

VAll* VAll::default_instance_ = NULL;

VAll* VAll::New() const {
  return new VAll;
}

void VAll::Clear() {
  response_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VAll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VAll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VResponse response = 1;
      case 1: {
        if (tag == 10) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_response;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VAll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VAll)
  return false;
#undef DO_
}

void VAll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VAll)
  // repeated .VResponse response = 1;
  for (int i = 0; i < this->response_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->response(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VAll)
}

::google::protobuf::uint8* VAll::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VAll)
  // repeated .VResponse response = 1;
  for (int i = 0; i < this->response_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->response(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VAll)
  return target;
}

int VAll::ByteSize() const {
  int total_size = 0;

  // repeated .VResponse response = 1;
  total_size += 1 * this->response_size();
  for (int i = 0; i < this->response_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->response(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VAll::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VAll* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VAll*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VAll::MergeFrom(const VAll& from) {
  GOOGLE_CHECK_NE(&from, this);
  response_.MergeFrom(from.response_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VAll::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VAll::CopyFrom(const VAll& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VAll::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->response())) return false;
  return true;
}

void VAll::Swap(VAll* other) {
  if (other != this) {
    response_.Swap(&other->response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VAll::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VAll_descriptor_;
  metadata.reflection = VAll_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VReqFeature::kILayerFieldNumber;
const int VReqFeature::kIImageFieldNumber;
const int VReqFeature::kDiffFieldNumber;
#endif  // !_MSC_VER

VReqFeature::VReqFeature()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VReqFeature)
}

void VReqFeature::InitAsDefaultInstance() {
}

VReqFeature::VReqFeature(const VReqFeature& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VReqFeature)
}

void VReqFeature::SharedCtor() {
  _cached_size_ = 0;
  i_layer_ = 0;
  i_image_ = 0;
  diff_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VReqFeature::~VReqFeature() {
  // @@protoc_insertion_point(destructor:VReqFeature)
  SharedDtor();
}

void VReqFeature::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VReqFeature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VReqFeature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VReqFeature_descriptor_;
}

const VReqFeature& VReqFeature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

VReqFeature* VReqFeature::default_instance_ = NULL;

VReqFeature* VReqFeature::New() const {
  return new VReqFeature;
}

void VReqFeature::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VReqFeature*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(i_layer_, diff_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VReqFeature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VReqFeature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 i_layer = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_layer_)));
          set_has_i_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_i_image;
        break;
      }

      // required int32 i_image = 2;
      case 2: {
        if (tag == 16) {
         parse_i_image:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i_image_)));
          set_has_i_image();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_diff;
        break;
      }

      // optional bool diff = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &diff_)));
          set_has_diff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VReqFeature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VReqFeature)
  return false;
#undef DO_
}

void VReqFeature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VReqFeature)
  // required int32 i_layer = 1;
  if (has_i_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->i_layer(), output);
  }

  // required int32 i_image = 2;
  if (has_i_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->i_image(), output);
  }

  // optional bool diff = 3 [default = false];
  if (has_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->diff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VReqFeature)
}

::google::protobuf::uint8* VReqFeature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VReqFeature)
  // required int32 i_layer = 1;
  if (has_i_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->i_layer(), target);
  }

  // required int32 i_image = 2;
  if (has_i_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->i_image(), target);
  }

  // optional bool diff = 3 [default = false];
  if (has_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->diff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VReqFeature)
  return target;
}

int VReqFeature::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 i_layer = 1;
    if (has_i_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i_layer());
    }

    // required int32 i_image = 2;
    if (has_i_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i_image());
    }

    // optional bool diff = 3 [default = false];
    if (has_diff()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VReqFeature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VReqFeature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VReqFeature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VReqFeature::MergeFrom(const VReqFeature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_i_layer()) {
      set_i_layer(from.i_layer());
    }
    if (from.has_i_image()) {
      set_i_image(from.i_image());
    }
    if (from.has_diff()) {
      set_diff(from.diff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VReqFeature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VReqFeature::CopyFrom(const VReqFeature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VReqFeature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void VReqFeature::Swap(VReqFeature* other) {
  if (other != this) {
    std::swap(i_layer_, other->i_layer_);
    std::swap(i_image_, other->i_image_);
    std::swap(diff_, other->diff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VReqFeature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VReqFeature_descriptor_;
  metadata.reflection = VReqFeature_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VReqWeight::kIndexFieldNumber;
const int VReqWeight::kDiffFieldNumber;
#endif  // !_MSC_VER

VReqWeight::VReqWeight()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VReqWeight)
}

void VReqWeight::InitAsDefaultInstance() {
}

VReqWeight::VReqWeight(const VReqWeight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VReqWeight)
}

void VReqWeight::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  diff_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VReqWeight::~VReqWeight() {
  // @@protoc_insertion_point(destructor:VReqWeight)
  SharedDtor();
}

void VReqWeight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VReqWeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VReqWeight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VReqWeight_descriptor_;
}

const VReqWeight& VReqWeight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

VReqWeight* VReqWeight::default_instance_ = NULL;

VReqWeight* VReqWeight::New() const {
  return new VReqWeight;
}

void VReqWeight::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VReqWeight*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, diff_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VReqWeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VReqWeight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_diff;
        break;
      }

      // optional bool diff = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &diff_)));
          set_has_diff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VReqWeight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VReqWeight)
  return false;
#undef DO_
}

void VReqWeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VReqWeight)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional bool diff = 2 [default = false];
  if (has_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->diff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VReqWeight)
}

::google::protobuf::uint8* VReqWeight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VReqWeight)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional bool diff = 2 [default = false];
  if (has_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->diff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VReqWeight)
  return target;
}

int VReqWeight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional bool diff = 2 [default = false];
    if (has_diff()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VReqWeight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VReqWeight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VReqWeight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VReqWeight::MergeFrom(const VReqWeight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_diff()) {
      set_diff(from.diff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VReqWeight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VReqWeight::CopyFrom(const VReqWeight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VReqWeight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VReqWeight::Swap(VReqWeight* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(diff_, other->diff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VReqWeight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VReqWeight_descriptor_;
  metadata.reflection = VReqWeight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VState::kAutoFieldNumber;
const int VState::kInputFieldNumber;
const int VState::kMapFieldNumber;
const int VState::kDeconvFieldNumber;
const int VState::kWeightFieldNumber;
#endif  // !_MSC_VER

VState::VState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VState)
}

void VState::InitAsDefaultInstance() {
  map_ = const_cast< ::VReqFeature*>(&::VReqFeature::default_instance());
  deconv_ = const_cast< ::VReqDeconv*>(&::VReqDeconv::default_instance());
  weight_ = const_cast< ::VReqWeight*>(&::VReqWeight::default_instance());
}

VState::VState(const VState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:VState)
}

void VState::SharedCtor() {
  _cached_size_ = 0;
  auto__ = true;
  input_ = -1;
  map_ = NULL;
  deconv_ = NULL;
  weight_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VState::~VState() {
  // @@protoc_insertion_point(destructor:VState)
  SharedDtor();
}

void VState::SharedDtor() {
  if (this != default_instance_) {
    delete map_;
    delete deconv_;
    delete weight_;
  }
}

void VState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VState_descriptor_;
}

const VState& VState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zoson_2eproto();
  return *default_instance_;
}

VState* VState::default_instance_ = NULL;

VState* VState::New() const {
  return new VState;
}

void VState::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    auto__ = true;
    input_ = -1;
    if (has_map()) {
      if (map_ != NULL) map_->::VReqFeature::Clear();
    }
    if (has_deconv()) {
      if (deconv_ != NULL) deconv_->::VReqDeconv::Clear();
    }
    if (has_weight()) {
      if (weight_ != NULL) weight_->::VReqWeight::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:VState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool auto = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &auto__)));
          set_has_auto_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_input;
        break;
      }

      // optional int32 input = 2 [default = -1];
      case 2: {
        if (tag == 16) {
         parse_input:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &input_)));
          set_has_input();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_map;
        break;
      }

      // optional .VReqFeature map = 3;
      case 3: {
        if (tag == 26) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_deconv;
        break;
      }

      // optional .VReqDeconv deconv = 4;
      case 4: {
        if (tag == 34) {
         parse_deconv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deconv()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_weight;
        break;
      }

      // optional .VReqWeight weight = 5;
      case 5: {
        if (tag == 42) {
         parse_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:VState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:VState)
  return false;
#undef DO_
}

void VState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:VState)
  // optional bool auto = 1 [default = true];
  if (has_auto_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->auto_(), output);
  }

  // optional int32 input = 2 [default = -1];
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->input(), output);
  }

  // optional .VReqFeature map = 3;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->map(), output);
  }

  // optional .VReqDeconv deconv = 4;
  if (has_deconv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->deconv(), output);
  }

  // optional .VReqWeight weight = 5;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:VState)
}

::google::protobuf::uint8* VState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:VState)
  // optional bool auto = 1 [default = true];
  if (has_auto_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->auto_(), target);
  }

  // optional int32 input = 2 [default = -1];
  if (has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->input(), target);
  }

  // optional .VReqFeature map = 3;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->map(), target);
  }

  // optional .VReqDeconv deconv = 4;
  if (has_deconv()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->deconv(), target);
  }

  // optional .VReqWeight weight = 5;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VState)
  return target;
}

int VState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool auto = 1 [default = true];
    if (has_auto_()) {
      total_size += 1 + 1;
    }

    // optional int32 input = 2 [default = -1];
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->input());
    }

    // optional .VReqFeature map = 3;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->map());
    }

    // optional .VReqDeconv deconv = 4;
    if (has_deconv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deconv());
    }

    // optional .VReqWeight weight = 5;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VState::MergeFrom(const VState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_()) {
      set_auto_(from.auto_());
    }
    if (from.has_input()) {
      set_input(from.input());
    }
    if (from.has_map()) {
      mutable_map()->::VReqFeature::MergeFrom(from.map());
    }
    if (from.has_deconv()) {
      mutable_deconv()->::VReqDeconv::MergeFrom(from.deconv());
    }
    if (from.has_weight()) {
      mutable_weight()->::VReqWeight::MergeFrom(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VState::CopyFrom(const VState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VState::IsInitialized() const {

  if (has_map()) {
    if (!this->map().IsInitialized()) return false;
  }
  if (has_deconv()) {
    if (!this->deconv().IsInitialized()) return false;
  }
  if (has_weight()) {
    if (!this->weight().IsInitialized()) return false;
  }
  return true;
}

void VState::Swap(VState* other) {
  if (other != this) {
    std::swap(auto__, other->auto__);
    std::swap(input_, other->input_);
    std::swap(map_, other->map_);
    std::swap(deconv_, other->deconv_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VState_descriptor_;
  metadata.reflection = VState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
